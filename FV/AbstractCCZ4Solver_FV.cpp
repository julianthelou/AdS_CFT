// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
#include "AbstractCCZ4Solver_FV.h"

#include "kernels/finitevolumes/commons/c/commons.h"
#include "kernels/finitevolumes/musclhancock/c/musclhancock.h"
#include "kernels/finitevolumes/riemannsolvers/c/riemannsolvers.h"

#include "CCZ4Solver_FV_Variables.h"
#include "CCZ4Solver_FV.h" // Have to include a proper declaration. Cannot use forward declared classes in static_cast.

#include <stdio.h>
#include <cstdlib> // abort()
#include "kernels/KernelUtils.h" // icellSize

#include "exahype/disableOptimization.h" // we experience compiler bugs sometimes.

CCZ4::CCZ4Solver_FV::CCZ4Solver_FV(const double maximumMeshSize,const exahype::solvers::Solver::TimeStepping timeStepping):
  AbstractCCZ4Solver_FV::AbstractCCZ4Solver_FV(maximumMeshSize,timeStepping) {
}

CCZ4::AbstractCCZ4Solver_FV::AbstractCCZ4Solver_FV(const double maximumMeshSize,const exahype::solvers::Solver::TimeStepping timeStepping):
exahype::solvers::FiniteVolumesSolver("CCZ4Solver_FV",NumberOfVariables,NumberOfParameters,NumberOfGlobalObservables, PatchSize,
                                        GhostLayerWidth,maximumMeshSize,timeStepping) {
}

void CCZ4::AbstractCCZ4Solver_FV::constantsToString(std::ostream& os) {
	// This string is used in the --version output to identify compile time constants
	os << "CCZ4::AbstractCCZ4Solver_FV("
	   << "nVar=" << NumberOfVariables << ", "
	   << "nParam=" << NumberOfParameters << ", "
	   << "PatchSize=" << PatchSize << ", "
	   << "GhostLayerWidth=" << GhostLayerWidth
	   << ")";
}

void CCZ4::AbstractCCZ4Solver_FV::abortWithMsg(const char* const msg) {
	// verbosily fail even without assertions turned on
	puts(msg);
	abort();
}

void CCZ4::AbstractCCZ4Solver_FV::solutionUpdate(double* luh,const tarch::la::Vector<DIMENSIONS,double>& cellCenter,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t, const double dt,double& maxAdmissibleDt) {
  maxAdmissibleDt = kernels::finitevolumes::musclhancock::c::solutionUpdate<
    true, true, false, false, false,
    kernels::finitevolumes::commons::c::minmod,
    CCZ4Solver_FV
    >(*static_cast<CCZ4Solver_FV*>(this),luh,cellCenter,cellSize,t,dt);
}


double CCZ4::AbstractCCZ4Solver_FV::stableTimeStepSize(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellSize) {
  double maxAdmissibleDt = kernels::finitevolumes::commons::c::stableTimeStepSize<CCZ4Solver_FV,false>(*static_cast<CCZ4Solver_FV*>(this),luh,cellSize);
  return maxAdmissibleDt;
}

void CCZ4::AbstractCCZ4Solver_FV::adjustSolution(double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt) {
  kernels::finitevolumes::commons::c::solutionAdjustment<CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this),luh,cellCentre,cellSize,t,dt);
}

void CCZ4::AbstractCCZ4Solver_FV::boundaryConditions(double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,const double t,const double dt,const tarch::la::Vector<DIMENSIONS, int>& posCell,const tarch::la::Vector<DIMENSIONS, int>& posBoundary) {
  constexpr int cellsPerFace = PatchSize*PatchSize*GhostLayerWidth;
  constexpr int sizeLuhbnd = (NumberOfVariables+NumberOfParameters)*cellsPerFace;
  
  const int indexLuhbndInside        = exahype::DataHeap::getInstance().createData(
       sizeLuhbnd,sizeLuhbnd,exahype::DataHeap::Allocation::UseRecycledEntriesIfPossibleCreateNewEntriesIfRequired);
  const int indexLuhbndOutside       = exahype::DataHeap::getInstance().createData(
       sizeLuhbnd,sizeLuhbnd,exahype::DataHeap::Allocation::UseRecycledEntriesIfPossibleCreateNewEntriesIfRequired);
  double* luhbndInside               = exahype::DataHeap::getInstance().getData(indexLuhbndInside).data();
  double* luhbndOutside              = exahype::DataHeap::getInstance().getData(indexLuhbndOutside).data();
  
  const int direction   = tarch::la::equalsReturnIndex(posCell, posBoundary);
  const int orientation = (1 + posBoundary(direction) - posCell(direction))/2;
  const int faceIndex   = 2*direction+orientation;
  
  boundaryLayerExtraction(luhbndInside,luh,posBoundary-posCell);
  kernels::finitevolumes::commons::c::boundaryConditions<CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this),luhbndOutside,luhbndInside,cellCentre,cellSize,t,dt,faceIndex,direction);
  ghostLayerFillingAtBoundary(luh,luhbndOutside,posBoundary-posCell);
  
  exahype::DataHeap::getInstance().deleteData(indexLuhbndInside,true);
  exahype::DataHeap::getInstance().deleteData(indexLuhbndOutside,true);
}


void CCZ4::AbstractCCZ4Solver_FV::ghostLayerFilling(double* const luh,const double* const luhNeighbour,const tarch::la::Vector<DIMENSIONS,int>& neighbourPosition) {
  kernels::finitevolumes::commons::c::ghostLayerFilling<CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this),luh,luhNeighbour,neighbourPosition);
}

void CCZ4::AbstractCCZ4Solver_FV::ghostLayerFillingAtBoundary(double* const luh,const double* const luhbnd,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) {
  kernels::finitevolumes::commons::c::ghostLayerFillingAtBoundary<CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this),luh,luhbnd,boundaryPosition);
}

void CCZ4::AbstractCCZ4Solver_FV::boundaryLayerExtraction(double* const luhbnd,const double* const luh,const tarch::la::Vector<DIMENSIONS,int>& boundaryPosition) {
  kernels::finitevolumes::commons::c::boundaryLayerExtraction<CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this),luhbnd,luh,boundaryPosition);
}

double CCZ4::AbstractCCZ4Solver_FV::riemannSolver(double* fL, double *fR, const double* qL, const double* qR, const double* gradQL, const double* gradQR, const double* cellSize, int direction) {
  // Default FV Riemann Solver
  return kernels::finitevolumes::riemannsolvers::c::rusanov<true, false, false, CCZ4Solver_FV>(*static_cast<CCZ4Solver_FV*>(this), fL,fR,qL,qR,gradQL, gradQR, cellSize, direction);

}

//--------


void CCZ4::AbstractCCZ4Solver_FV::resetGlobalObservables(double* const globalObservables) {
}

void CCZ4::AbstractCCZ4Solver_FV::updateGlobalObservables(
    double* const                               globalObservables,
    const double* const                         luh,
    const tarch::la::Vector<DIMENSIONS,double>& cellCentre,
    const tarch::la::Vector<DIMENSIONS,double>& cellSize,
    const double t,
    const double dt) {
}

void CCZ4::AbstractCCZ4Solver_FV::mergeGlobalObservables(double* const globalObservables,const double* const otherObservables) {
}

void CCZ4::AbstractCCZ4Solver_FV::wrapUpGlobalObservables(double* const globalObservables) {
}

//--------

// user hooks
void CCZ4::AbstractCCZ4Solver_FV::resetGlobalObservables(GlobalObservables& globalObservables) const {
  abortWithMsg("If this operation is entered (resetGlobalObservables), you have specified global observables. Then you have to re-implement this routine, too." );
}

void CCZ4::AbstractCCZ4Solver_FV::mapGlobalObservables(
    GlobalObservables&                          globalObservables,
    const double* const                         luh,
    const tarch::la::Vector<DIMENSIONS,double>& cellCentre,
    const tarch::la::Vector<DIMENSIONS,double>& cellSize,
    const double t,
    const double dt) const {
  abortWithMsg("If this operation is entered (mapGlobalObservables), you have specified global observables. Then you have to re-implement this routine, too." );
}

void CCZ4::AbstractCCZ4Solver_FV::mergeGlobalObservables(
    GlobalObservables&         globalObservables,
    ReadOnlyGlobalObservables& otherObservables) const {
  abortWithMsg("If this operation is entered (mergeGlobalObservables), you have specified global observables. Then you have to re-implement this routine, too." );
}

void CCZ4::AbstractCCZ4Solver_FV::wrapUpGlobalObservables(GlobalObservables& globalObservables) const {
  // Please re-implement if required.
}

/**
 * Fallback implementations of joined functions. Users can either safely ignore this
 * or overwrite with their own implementations.
 **/
 // @todo Can we remove this one?
#include "kernels/fusedMethods.cpph"